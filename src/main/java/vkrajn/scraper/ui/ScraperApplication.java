package vkrajn.scraper.ui;

import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vkrajn.scraper.data.dictionary.Dictionary;
import vkrajn.scraper.data.dictionary.DictionaryTrieImpl;
import vkrajn.scraper.parser.JsoupParser;
import vkrajn.scraper.parser.Parser;

/**
 * Launching point for the application. Propmts the user for input and shows a
 * form of data based on retrieved result.
 *
 * @author Vojtech Krajnansky
 * @version 07/18/2017
 */
public class ScraperApplication extends javax.swing.JFrame {

    /**
     * Creates new form ScrapperApplication, fills form data based on the
     * retrieved page.
     */
    public ScraperApplication() {
        initComponents();
        fillForm(showInputDialog(false));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableFrequencies = new javax.swing.JTable();
        labelFrequencies = new javax.swing.JLabel();
        labelLetter = new javax.swing.JLabel();
        labelWords = new javax.swing.JLabel();
        newUrlButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableLongest = new javax.swing.JTable();
        mostCommon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Page Statistics");

        tableFrequencies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Word", "Frequency"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableFrequencies);

        labelFrequencies.setText("Word Frequencies");

        labelLetter.setText("Most common letter:");

        labelWords.setText("Longest Words");

        newUrlButton.setText("Get new");
        newUrlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUrlButtonActionPerformed(evt);
            }
        });

        tableLongest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Word"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableLongest);

        mostCommon.setText("<unavailable>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelLetter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mostCommon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                        .addComponent(newUrlButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                                .addComponent(labelFrequencies)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(labelWords))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelLetter)
                        .addComponent(mostCommon))
                    .addComponent(newUrlButton))
                .addGap(37, 37, 37)
                .addComponent(labelWords)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelFrequencies)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Action handlers
    private void newUrlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUrlButtonActionPerformed
        fillForm(showInputDialog(false));
    }//GEN-LAST:event_newUrlButtonActionPerformed

    /**
     * Application main method.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set the Nimbus look and feel
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScraperApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScraperApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScraperApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScraperApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ScraperApplication().setVisible(true);
            }

        });
    }

    // Helper Methods
    /**
     * Retrieves web page text using a {@link Parser}, creates its
     * {@link Dictionary}, and fills form with desired retrieved data.
     *
     * @param url {@link String} representation of the URL of the web page to
     * scrape
     */
    private void fillForm(String url) {
        // Update only if new URL has been provided
        if (url != null) {
            Dictionary dict = new DictionaryTrieImpl();
            List<String> words = parseUrl(url);

            // Handle error when parsing
            if (words == null) {
                setTitle("ERROR: No response recieved");
                return;
            } else {
                setTitle("Page Statistics");
            }

            words.forEach(dict::insert);

            // Handle change of word frequencies
            DefaultTableModel modelFreq = (DefaultTableModel) tableFrequencies
                    .getModel();

            modelFreq.setRowCount(0);
            dict.getWordFrequencies().forEach(wf -> {
                modelFreq.addRow(new Object[]{wf.getWord(), wf.getFrequency()});
            });

            // Handle change of longest words
            DefaultTableModel modelLongest = (DefaultTableModel) tableLongest
                    .getModel();

            modelLongest.setRowCount(0);
            dict.getLongestWords().forEach(word -> {
                modelLongest.addRow(new Object[]{word});
            });

            // Handle change of most common letter
            if (dict.getMostFrequentLetter() != null) {
                mostCommon.setText(dict.getMostFrequentLetter().toString());
            } else {
                mostCommon.setText("<unavailable>");
            }
            
        }
    }

    /**
     * Gets and parses a web page with the given URL into a {@link List} of
     * words.
     *
     * @param url a {@link String} representation of the page URL
     * @return a {@link List} of parsed words
     */
    private List<String> parseUrl(String url) {
        Parser parser = new JsoupParser();

        try {
            String text = parser.getText(url);
            List<String> words = parser.getWords(text);

            return words;
        } catch (IOException e) {
            return null;
        }
    }

    /**
     * Shows input dialog which prompts the user for a URL, if the URL is not
     * valid, prompts the user again with an error message.
     *
     * @param showError whether the error message should be displayed
     * @return a {@link String} of a correctly formed URL
     */
    private String showInputDialog(boolean showError) {
        String message = "Insert URL here:";
        String error = "Not a valid URL, please try again:";

        String url = JOptionPane.showInputDialog(showError ? error : message);

        // Handle click on the Cancel button
        if (url == null) {
            return null;
        }

        // Check against the pattern
        String regexp = "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*"
                + "[-a-zA-Z0-9+&@#/%=~_|]";
        Pattern pattern = Pattern.compile(regexp);
        Matcher matcher = pattern.matcher(url);

        if (matcher.matches()) {
            return url;
        }

        return showInputDialog(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelFrequencies;
    private javax.swing.JLabel labelLetter;
    private javax.swing.JLabel labelWords;
    private javax.swing.JLabel mostCommon;
    private javax.swing.JButton newUrlButton;
    private javax.swing.JTable tableFrequencies;
    private javax.swing.JTable tableLongest;
    // End of variables declaration//GEN-END:variables
}
